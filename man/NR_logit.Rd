% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/NR_logit.R
\name{NR_logit}
\alias{NR_logit}
\title{Newton-Raphson method for computing MLE under logistic regression model}
\usage{
NR_logit(x, y, n, tol = 1e-06, verbose = FALSE)
}
\arguments{
\item{x}{vector of covariates (predictor)}

\item{y}{vector of responses, each one distributed as a Binomial random variable}

\item{n}{vector of number of trials for each observation.}

\item{tol}{tolerance level governing when to stop the iterations. Here we use the larger absolute error for either parameter and compare it to \code{tol}. Iterations stop when the error is less than \code{tol}. Defaults to \code{1e-6}.}

\item{verbose}{Logical; if \code{TRUE} then function prints iterative feedback to the console, and if \code{FALSE} there is no printing. Defaults to \code{FALSE}.}
}
\value{
A data.frame with two entries in one row, the first being the MLE of the intercept and the second being the MLE of the slope.
}
\description{
For a simple logistic regression model with an intercept and one slope parameter, this function returns their respective MLE's. Iterations stop once the improvement in successive steps falls under a certain tolerance level.
}
\details{
We can view \code{y} as the number of successes out of \code{n} trials, with probability of success \code{p} unknown. The linear predictor is related to \code{p} by the log odds ratio: \eqn{log(p/(1-p)) = \alpha + \beta x}.
It is known that in logsitic regression, we cannot obtain closed form solutions for \eqn{\alpha} and \eqn{\beta}. This function uses the Newton-Raphson method to estimate these parameters. Our initial value is (\eqn{\alpha_0}, \eqn{\beta_0)} = (0, 0), an intuitive choice that corresponds to the case of equally likely outcomes (p = 0.5).

In the function definition, the matrix \code{L} is the system of nonlinear score functions we need to solve, and \code{L_prime} is the derivative of \code{L}. Hence, each step of the iteration computes updated estimates via (\eqn{\alpha_{i+1}}, \eqn{\beta_{i+1}}) = (\eqn{\alpha_{i}}, \eqn{\beta_{i}}) + \code{L_prime}^-1 * \code{L}.
}
\examples{
# Generate random covariates, responses, and trial totals
set.seed(547)
x <- runif(15, 6, 10)
n <- sample(1:15, replace = TRUE)
y <- rbinom(15, n, 0.6)
NR_logit(x, y, n)
NR_logit(x, y, n, verbose = TRUE)
NR_logit(x, y, n, tol = 1e-10, verbose = TRUE)
}

